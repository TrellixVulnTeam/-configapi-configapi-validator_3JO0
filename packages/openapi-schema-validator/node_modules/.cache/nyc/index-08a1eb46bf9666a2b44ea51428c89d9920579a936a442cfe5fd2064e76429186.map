{"version":3,"file":"/Users/user/WebstormProjects/-configapi-configapi-validator/packages/openapi-schema-validator/index.ts","sources":["/Users/user/WebstormProjects/-configapi-configapi-validator/packages/openapi-schema-validator/index.ts"],"names":[],"mappings":";;AAAA,2BAAyD;AACzD,2CAAqC;AACrC,IAAM,cAAc,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AAC/D,IAAM,cAAc,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AAC/D,IAAM,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAoBtC;IAEE,gCAAY,IAAgC;QAC1C,IAAM,CAAC,GAAG,IAAI,aAAG,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QACtD,qBAAU,CAAC,CAAC,CAAC,CAAC;QACd,IAAM,OAAO,GAAG,CAAC,IAAI,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;QAClE,IAAM,MAAM,GAAG,KAAK,CAClB,EAAE,EACF,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,EAC/C,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAC5B,CAAC;QACF,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAEM,yCAAQ,GAAf,UAAgB,UAA4B;QAC1C,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE;YAC/B,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;SAC1C;aAAM;YACL,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;SACvB;IACH,CAAC;IACH,6BAAC;AAAD,CAAC,AAtBD,IAsBC","sourcesContent":["import ajv, { ValidateFunction, ErrorObject } from \"ajv\";\nimport addFormats from \"ajv-formats\";\nconst openapi2Schema = require(\"./resources/openapi-2.0.json\");\nconst openapi3Schema = require(\"./resources/openapi-3.0.json\");\nconst merge = require(\"lodash.merge\");\nimport { IJsonSchema, OpenAPI } from \"openapi-types\";\n\nexport interface IOpenAPISchemaValidator {\n  /**\n   * Validate the provided OpenAPI doc against this validator's schema version and\n   * return the results.\n   */\n  validate(doc: OpenAPI.Document): OpenAPISchemaValidatorResult;\n}\n\nexport interface OpenAPISchemaValidatorArgs {\n  version: number | string;\n  extensions?: IJsonSchema;\n}\n\nexport interface OpenAPISchemaValidatorResult {\n  errors: ErrorObject[];\n}\n\nexport default class OpenAPISchemaValidator implements IOpenAPISchemaValidator {\n  private validator: ValidateFunction;\n  constructor(args: OpenAPISchemaValidatorArgs) {\n    const v = new ajv({ allErrors: true, strict: false });\n    addFormats(v);\n    const version = (args && parseInt(String(args.version), 10)) || 2;\n    const schema = merge(\n      {},\n      version === 2 ? openapi2Schema : openapi3Schema,\n      args ? args.extensions : {}\n    );\n    v.addSchema(schema);\n    this.validator = v.compile(schema);\n  }\n\n  public validate(openapiDoc: OpenAPI.Document): OpenAPISchemaValidatorResult {\n    if (!this.validator(openapiDoc)) {\n      return { errors: this.validator.errors };\n    } else {\n      return { errors: [] };\n    }\n  }\n}\n"]}
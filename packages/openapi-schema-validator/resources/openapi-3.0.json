{
  "title": "A JSON Schema for ConfigAPI 1.0.",
  "$id": "http://openapis.org/v3/schema.json#",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "description": "This is the root document object of the ConfigAPI document.",
  "required": [
    "configapi",
    "info",
    "components"
  ],
  "additionalProperties": false,
  "patternProperties": {
    "^x-": {
      "$ref": "#/definitions/specificationExtension"
    }
  },
  "properties": {
    "configapi": {
      "type": "string"
    },
    "info": {
      "$ref": "#/definitions/info"
    },
    "paths": {
      "$ref": "#/definitions/paths"
    },
    "components": {
      "$ref": "#/definitions/components"
    },
    "tags": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/tag"
      },
      "uniqueItems": true
    },
    "externalDocs": {
      "$ref": "#/definitions/externalDocs"
    }
  },
  "definitions": {
    "info": {
      "type": "object",
      "description": "The object provides metadata about the API. The metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience.",
      "required": [
        "title",
        "version"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/specificationExtension"
        }
      },
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "termsOfService": {
          "type": "string"
        },
        "contact": {
          "$ref": "#/definitions/contact"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "contact": {
      "type": "object",
      "description": "Contact information for the exposed API.",
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/specificationExtension"
        }
      },
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "components": {
      "type": "object",
      "description": "Holds a set of reusable objects for different aspects of the OAS. All objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.",
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/specificationExtension"
        }
      },
      "properties": {
        "schemas": {
          "$ref": "#/definitions/schemasOrReferences"
        },
        "parameters": {
          "$ref": "#/definitions/parametersOrReferences"
        },
        "examples": {
          "$ref": "#/definitions/examplesOrReferences"
        },
        "links": {
          "$ref": "#/definitions/linksOrReferences"
        },
        "callbacks": {
          "$ref": "#/definitions/callbacksOrReferences"
        }
      }
    },
    "paths": {
      "type": "object",
      "description": "Holds the relative paths to the individual endpoints and their operations. The path is appended to the URL from the `Server Object` in order to construct the full URL.  The Paths MAY be empty, due to ACL constraints.",
      "additionalProperties": false,
      "patternProperties": {
        "^/": {
          "$ref": "#/definitions/pathItem"
        },
        "^x-": {
          "$ref": "#/definitions/specificationExtension"
        }
      }
    },
    "pathItem": {
      "type": "object",
      "description": "Describes the operations available on a single path. A Path Item MAY be empty, due to ACL constraints. The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.",
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/specificationExtension"
        }
      },
      "properties": {
        "$ref": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "get": {
          "$ref": "#/definitions/operation"
        },
        "put": {
          "$ref": "#/definitions/operation"
        },
        "post": {
          "$ref": "#/definitions/operation"
        },
        "delete": {
          "$ref": "#/definitions/operation"
        },
        "options": {
          "$ref": "#/definitions/operation"
        },
        "head": {
          "$ref": "#/definitions/operation"
        },
        "patch": {
          "$ref": "#/definitions/operation"
        },
        "trace": {
          "$ref": "#/definitions/operation"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/parameterOrReference"
          },
          "uniqueItems": true
        }
      }
    },
    "operation": {
      "type": "object",
      "description": "Describes a single API operation on a path.",
      "required": [
        "responses"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/specificationExtension"
        }
      },
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "operationId": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/parameterOrReference"
          },
          "uniqueItems": true
        },
        "callbacks": {
          "$ref": "#/definitions/callbacksOrReferences"
        },
        "deprecated": {
          "type": "boolean"
        }
      }
    },
    "externalDocs": {
      "type": "object",
      "description": "Allows referencing an external resource for extended documentation.",
      "required": [
        "url"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/specificationExtension"
        }
      },
      "properties": {
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "parameter": {
      "type": "object",
      "description": "Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.",
      "required": [
        "name",
        "in"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/specificationExtension"
        }
      },
      "properties": {
        "name": {
          "type": "string"
        },
        "in": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "deprecated": {
          "type": "boolean"
        },
        "allowEmptyValue": {
          "type": "boolean"
        },
        "style": {
          "type": "string"
        },
        "explode": {
          "type": "boolean"
        },
        "allowReserved": {
          "type": "boolean"
        },
        "schema": {
          "$ref": "#/definitions/schemaOrReference"
        },
        "example": {
          "$ref": "#/definitions/any"
        },
        "examples": {
          "$ref": "#/definitions/examplesOrReferences"
        },
        "content": {
          "$ref": "#/definitions/mediaTypes"
        }
      }
    },
    "mediaType": {
      "type": "object",
      "description": "Each Media Type Object provides schema and examples for the media type identified by its key.",
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/specificationExtension"
        }
      },
      "properties": {
        "schema": {
          "$ref": "#/definitions/schemaOrReference"
        },
        "example": {
          "$ref": "#/definitions/any"
        },
        "examples": {
          "$ref": "#/definitions/examplesOrReferences"
        },
        "encoding": {
          "$ref": "#/definitions/encodings"
        }
      }
    },
    "encoding": {
      "type": "object",
      "description": "A single encoding definition applied to a single schema property.",
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/specificationExtension"
        }
      },
      "properties": {
        "contentType": {
          "type": "string"
        },
        "headers": {
          "$ref": "#/definitions/headersOrReferences"
        },
        "style": {
          "type": "string"
        },
        "explode": {
          "type": "boolean"
        },
        "allowReserved": {
          "type": "boolean"
        }
      }
    },
    "callback": {
      "type": "object",
      "description": "A map of possible out-of band callbacks related to the parent operation. Each value in the map is a Path Item Object that describes a set of requests that may be initiated by the API provider and the expected responses. The key value used to identify the callback object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.",
      "additionalProperties": false,
      "patternProperties": {
        "^": {
          "$ref": "#/definitions/pathItem"
        },
        "^x-": {
          "$ref": "#/definitions/specificationExtension"
        }
      }
    },
    "example": {
      "type": "object",
      "description": "",
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/specificationExtension"
        }
      },
      "properties": {
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/any"
        },
        "externalValue": {
          "type": "string"
        }
      }
    },
    "link": {
      "type": "object",
      "description": "The `Link object` represents a possible design-time link for a response. The presence of a link does not guarantee the caller's ability to successfully invoke it, rather it provides a known relationship and traversal mechanism between responses and other operations.  Unlike _dynamic_ links (i.e. links provided **in** the response payload), the OAS linking mechanism does not require link information in the runtime response.  For computing links, and providing instructions to execute them, a runtime expression is used for accessing values in an operation and using them as parameters while invoking the linked operation.",
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/specificationExtension"
        }
      },
      "properties": {
        "operationRef": {
          "type": "string"
        },
        "operationId": {
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/anysOrExpressions"
        },
        "requestBody": {
          "$ref": "#/definitions/anyOrExpression"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "tag": {
      "type": "object",
      "description": "Adds metadata to a single tag that is used by the Operation Object. It is not mandatory to have a Tag Object per tag defined in the Operation Object instances.",
      "required": [
        "name"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/specificationExtension"
        }
      },
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        }
      }
    },
    "examples": {
      "type": "object",
      "description": "",
      "additionalProperties": false
    },
    "reference": {
      "type": "object",
      "description": "A simple object to allow referencing other components in the specification, internally and externally.  The Reference Object is defined by JSON Reference and follows the same structure, behavior and rules.   For this specification, reference resolution is accomplished as defined by the JSON Reference specification and not by the JSON Schema specification.",
      "required": [
        "$ref"
      ],
      "additionalProperties": false,
      "properties": {
        "$ref": {
          "type": "string"
        }
      }
    },
    "schema": {
      "type": "object",
      "description": "The Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is an extended subset of the JSON Schema Specification Wright Draft 00.  For more information about the properties, see JSON Schema Core and JSON Schema Validation. Unless stated otherwise, the property definitions follow the JSON Schema.",
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/specificationExtension"
        }
      },
      "properties": {
        "nullable": {
          "type": "boolean"
        },
        "discriminator": {
          "$ref": "#/definitions/discriminator"
        },
        "readOnly": {
          "type": "boolean"
        },
        "writeOnly": {
          "type": "boolean"
        },
        "xml": {
          "$ref": "#/definitions/xml"
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        },
        "example": {
          "$ref": "#/definitions/any"
        },
        "deprecated": {
          "type": "boolean"
        },
        "title": {
          "$ref": "http://json-schema.org/draft-07/schema#/properties/title"
        },
        "multipleOf": {
          "$ref": "http://json-schema.org/draft-07/schema#/properties/multipleOf"
        },
        "maximum": {
          "$ref": "http://json-schema.org/draft-07/schema#/properties/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "http://json-schema.org/draft-07/schema#/properties/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "http://json-schema.org/draft-07/schema#/properties/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "http://json-schema.org/draft-07/schema#/properties/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "http://json-schema.org/draft-07/schema#/properties/maxLength"
        },
        "minLength": {
          "$ref": "http://json-schema.org/draft-07/schema#/properties/minLength"
        },
        "pattern": {
          "$ref": "http://json-schema.org/draft-07/schema#/properties/pattern"
        },
        "maxItems": {
          "$ref": "http://json-schema.org/draft-07/schema#/properties/maxItems"
        },
        "minItems": {
          "$ref": "http://json-schema.org/draft-07/schema#/properties/minItems"
        },
        "uniqueItems": {
          "$ref": "http://json-schema.org/draft-07/schema#/properties/uniqueItems"
        },
        "maxProperties": {
          "$ref": "http://json-schema.org/draft-07/schema#/properties/maxProperties"
        },
        "minProperties": {
          "$ref": "http://json-schema.org/draft-07/schema#/properties/minProperties"
        },
        "required": {
          "$ref": "http://json-schema.org/draft-07/schema#/properties/required"
        },
        "enum": {
          "$ref": "http://json-schema.org/draft-07/schema#/properties/enum"
        },
        "type": {
          "type": "string"
        },
        "allOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemaOrReference"
          },
          "minItems": 1
        },
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemaOrReference"
          },
          "minItems": 1
        },
        "anyOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemaOrReference"
          },
          "minItems": 1
        },
        "not": {
          "$ref": "#/definitions/schema"
        },
        "items": {
          "anyOf": [
            {
              "$ref": "#/definitions/schemaOrReference"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schemaOrReference"
              },
              "minItems": 1
            }
          ]
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/schemaOrReference"
          }
        },
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/definitions/schemaOrReference"
            },
            {
              "type": "boolean"
            }
          ]
        },
        "default": {
          "$ref": "#/definitions/defaultType"
        },
        "description": {
          "type": "string"
        },
        "format": {
          "type": "string"
        }
      }
    },
    "discriminator": {
      "type": "object",
      "description": "When request bodies or response payloads may be one of a number of different schemas, a `discriminator` object can be used to aid in serialization, deserialization, and validation.  The discriminator is a specific object in a schema which is used to inform the consumer of the specification of an alternative schema based on the value associated with it.  When using the discriminator, _inline_ schemas will not be considered.",
      "required": [
        "propertyName"
      ],
      "additionalProperties": false,
      "properties": {
        "propertyName": {
          "type": "string"
        },
        "mapping": {
          "$ref": "#/definitions/strings"
        }
      }
    },
    "xml": {
      "type": "object",
      "description": "A metadata object that allows for more fine-tuned XML model definitions.  When using arrays, XML element names are *not* inferred (for singular/plural forms) and the `name` property SHOULD be used to add that information. See examples for expected behavior.",
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/specificationExtension"
        }
      },
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "attribute": {
          "type": "boolean"
        },
        "wrapped": {
          "type": "boolean"
        }
      }
    },
    "anyOrExpression": {
      "oneOf": [
        {
          "$ref": "#/definitions/any"
        },
        {
          "$ref": "#/definitions/expression"
        }
      ]
    },
    "callbackOrReference": {
      "oneOf": [
        {
          "$ref": "#/definitions/callback"
        },
        {
          "$ref": "#/definitions/reference"
        }
      ]
    },
    "exampleOrReference": {
      "oneOf": [
        {
          "$ref": "#/definitions/example"
        },
        {
          "$ref": "#/definitions/reference"
        }
      ]
    },
    "headerOrReference": {
      "oneOf": [
        {
          "$ref": "#/definitions/reference"
        }
      ]
    },
    "linkOrReference": {
      "oneOf": [
        {
          "$ref": "#/definitions/link"
        },
        {
          "$ref": "#/definitions/reference"
        }
      ]
    },
    "parameterOrReference": {
      "oneOf": [
        {
          "$ref": "#/definitions/parameter"
        },
        {
          "$ref": "#/definitions/reference"
        }
      ]
    },
    "schemaOrReference": {
      "oneOf": [
        {
          "$ref": "#/definitions/schema"
        },
        {
          "$ref": "#/definitions/reference"
        }
      ]
    },
    "anysOrExpressions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/anyOrExpression"
      }
    },
    "callbacksOrReferences": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/callbackOrReference"
      }
    },
    "encodings": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/encoding"
      }
    },
    "examplesOrReferences": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/exampleOrReference"
      }
    },
    "headersOrReferences": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/headerOrReference"
      }
    },
    "linksOrReferences": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/linkOrReference"
      }
    },
    "mediaTypes": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/mediaType"
      }
    },
    "parametersOrReferences": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/parameterOrReference"
      }
    },
    "schemasOrReferences": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/schemaOrReference"
      }
    },
    "strings": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "object": {
      "type": "object",
      "additionalProperties": true
    },
    "any": {
      "additionalProperties": true
    },
    "expression": {
      "type": "object",
      "additionalProperties": true
    },
    "specificationExtension": {
      "description": "Any property starting with x- is valid.",
      "oneOf": [
        {
          "type": "null"
        },
        {
          "type": "number"
        },
        {
          "type": "boolean"
        },
        {
          "type": "string"
        },
        {
          "type": "object"
        },
        {
          "type": "array"
        }
      ]
    },
    "defaultType": {
      "oneOf": [
        {
          "type": "null"
        },
        {
          "type": "array"
        },
        {
          "type": "object"
        },
        {
          "type": "number"
        },
        {
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ]
    }
  }
}
